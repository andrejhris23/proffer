// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

enum Role {
  AGENT
  TALENT
}

model User {
  id           String        @id @default(cuid())
  name         String?
  email        String?       @unique
  image        String?
  role         Role?
  accounts     Account[]
  sessions     Session[]
  offers       Offer[]
  applications Application[]
}

model Offer {
  id           String        @id @default(cuid())
  agentId      String
  title        String
  category     String
  description  String
  type         String
  payRange     String
  website      String?
  createdAt    DateTime      @default(now())
  validUntil   DateTime
  applications Application[]
  user         User          @relation(fields: [agentId], references: [id])
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

model Application {
  id           String   @id @default(cuid())
  offerId      String
  talentId     String
  firstName    String
  lastName     String
  summary      String
  contactMail  String
  cvUrl        String
  portfolioUrl String?
  createdAt    DateTime @default(now())
  status       Status   @default(PENDING)
  user         User     @relation(fields: [talentId], references: [id])
  offer        Offer    @relation(fields: [offerId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
